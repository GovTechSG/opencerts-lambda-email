service: dlt-functions

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'stg'}
  region: ap-southeast-1
  environment:
    OA_DOC_STORAGE_TABLE: dlt-oa-doc-storage-${opt:stage, self:provider.stage}
    SES_KEY_ID: ${self:custom.SES_KEY_ID.${self:provider.stage}}
    SES_SECRET: ${self:custom.SES_SECRET.${self:provider.stage}}
    SES_REGION: ${self:custom.SES_REGION.${self:provider.stage}}
    RECAPTCHA_SECRET: ${self:custom.RECAPTCHA_SECRET.${self:provider.stage}}
    NETWORK: ${self:custom.NETWORK.${self:provider.stage}}
    EMAIL_API_KEYS: ${self:custom.EMAIL_API_KEYS.${self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.OA_DOC_STORAGE_TABLE}"

resources:
  Resources:
    DocsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.OA_DOC_STORAGE_TABLE}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

functions:
  email:
    description: Sends email on behalf of user to third party with the OpenCerts' preset template.
    handler: src/email.handler
    events:
      - http:
          path: /email
          method: post
          cors: true
  verify:
    description: Checks the validity of the certificate against the 4 checks.
    handler: src/verify.handler
    events:
      - http:
          path: /verify
          method: post
          cors: true
  get: 
    handler: src/storage/get.handler
    events:
      - http:
          path: /storage/get/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
  create:
    handler: src/storage/create.handler
    events:
      - http:
          path: /storage/create
          method: post
          cors: true
  update:
    handler: src/storage/update.handler
    events: 
      - http:
          path: /storage/update
          method: post
          cors: true
  getQueueNumber:
    handler: src/storage/queueNumber.handler
    events:
      - http:
          path: /storage/queue
          method: get
          cors: true

custom:
  # Enable auto migration in local dynamodb on start
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  SES_KEY_ID:
    stg: ${env:stg_SES_KEY_ID}
    prd: ${env:prd_SES_KEY_ID}
  SES_SECRET:
    stg: ${env:stg_SES_SECRET}
    prd: ${env:prd_SES_SECRET}
  SES_REGION:
    stg: ${env:stg_SES_REGION}
    prd: ${env:prd_SES_REGION}
  RECAPTCHA_SECRET:
    stg: ${env:stg_RECAPTCHA_SECRET}
    prd: ${env:prd_RECAPTCHA_SECRET}
  NETWORK:
    stg: ${env:stg_NETWORK}
    prd: ${env:prd_NETWORK}
  EMAIL_API_KEYS:
    stg: ${env:stg_EMAIL_API_KEYS}
    prd: ${env:prd_EMAIL_API_KEYS}


plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-dynamodb-local
