service: dlt-functions
provider:
  name: aws
  runtime: nodejs8.10
  stage: '${opt:stage, ''stg''}'
  region: ap-southeast-1
  environment:
    BUCKET_NAME: '${self:custom.BUCKET_NAME.${self:provider.stage}}'
    OBJECT_TTL: '${self:custom.OBJECT_TTL.${self:provider.stage}}'
    SES_KEY_ID: '${self:custom.SES_KEY_ID.${self:provider.stage}}'
    SES_SECRET: '${self:custom.SES_SECRET.${self:provider.stage}}'
    SES_REGION: '${self:custom.SES_REGION.${self:provider.stage}}'
    RECAPTCHA_SECRET: '${self:custom.RECAPTCHA_SECRET.${self:provider.stage}}'
    NETWORK: '${self:custom.NETWORK.${self:provider.stage}}'
    EMAIL_API_KEYS: '${self:custom.EMAIL_API_KEYS.${self:provider.stage}}'
  iamRoleStatements:
    -
      Effect: Allow
      Action: ['s3:putObject', 's3:upload', 's3:deleteObject', 's3:getObject']
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : '${self:custom.BUCKET_NAME.${self:provider.stage}}' } ] ]  }
resources:
  Resources:
    DeployedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.BUCKET_NAME.${self:provider.stage}}'
functions:
    email:
      description: 'Sends email on behalf of user to third party with the OpenCerts'' preset template.'
      handler: src/email.handler
      events:
        - {http: {path: /email, method: post, cors: true}}
    verify:
      description: 'Checks the validity of the certificate against the 4 checks.'
      handler: src/verify.handler
      events:
        - {http: {path: /verify, method: post, cors: true}}
    get:
      handler: src/storage/get.handler
      events:
        - {http: {path: '/storage/get/{id}', method: get, request: {parameters: {paths: {id: true}}}, cors: true}}
    create:
      handler: src/storage/create.handler
      events:
        - {http: {path: /storage/create, method: post, cors: true}}
    getQueueNumber:
      handler: src/storage/queueNumber.handler
      events:
        - {http: {path: /storage/queue, method: get, cors: true}}
        - s3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          lifecycle:
            -
              ExpirationInDays: ${self:provider.environment.OBJECT_TTL}
              Status: Enabled

custom:
  bucket: '${self:custom.BUCKET_NAME.${self:provider.stage}}'
  s3:
    port: 8000
    directory: /tmp
  SES_KEY_ID:
    stg: '${env:stg_SES_KEY_ID}'
    prd: '${env:prd_SES_KEY_ID}'
  SES_SECRET:
    stg: '${env:stg_SES_SECRET}'
    prd: '${env:prd_SES_SECRET}'
  SES_REGION:
    stg: '${env:stg_SES_REGION}'
    prd: '${env:prd_SES_REGION}'
  RECAPTCHA_SECRET:
    stg: '${env:stg_RECAPTCHA_SECRET}'
    prd: '${env:prd_RECAPTCHA_SECRET}'
  NETWORK:
    stg: '${env:stg_NETWORK}'
    prd: '${env:prd_NETWORK}'
  EMAIL_API_KEYS:
    stg: '${env:stg_EMAIL_API_KEYS}'
    prd: '${env:prd_EMAIL_API_KEYS}'
  BUCKET_NAME:
    stg: '${env:stg_BUCKET_NAME}'
    prd: '${env:prd_BUCKET_NAME}'
  OBJECT_TTL:
    stg: '${env: stg_OBJECT_TTL}'
    prd: '${env: prd_OBJECT_TTL}'
plugins:
  - serverless-dotenv-plugin
  - serverless-s3-local
  - serverless-offline
