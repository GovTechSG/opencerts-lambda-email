service: storage
provider:
  name: aws
  runtime: nodejs12.x
  stage: '${opt:stage, 'stg'}'
  region: ap-southeast-1
  memorySize: 256
  timeout: 30 # downstream things take a long time
  tracing:
    lambda: true
    apiGateway: true
  logs:
    restApi: true
  environment:
    BUCKET_NAME: '${self:custom.BUCKET_NAME}'
    OBJECT_TTL: '${self:custom.OBJECT_TTL}'
    S3_REGION: ${self:provider.region}
  iamRoleStatements:
    -
      Effect: Allow
      Action: ['s3:putObject', 's3:upload', 's3:deleteObject', 's3:getObject']
      Resource:
        -  "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : 'DeployedBucket' }, "/*" ] ]
resources:
  Resources:
    DeployedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.BUCKET_NAME}'
functions:
    get:
      handler: index.getHandler
      events:
        - {http: {path: '/{id}', method: get, request: {parameters: {paths: {id: true}}}, cors: true}}
    createAtId:
      handler: index.createAtIdHandler
      events:
        - {http: {path: '/{id}', method: post, request: {parameters: {paths: {id: true}}}, cors: true}}
    create:
      handler: index.createHandler
      events:
        - {http: {path: /, method: post, cors: true}}
    getQueueNumber:
      handler: index.queueNumberHandler
      events:
        - {http: {path: /queue, method: get, cors: true}}
        - s3:
          bucket: ${self:custom.BUCKET_NAME}
          lifecycle:
            -
              ExpirationInDays: ${self:custom.OBJECT_TTL}
              Status: Enabled

custom:
  s3:
    port: 8000
    directory: /tmp
  BUCKET_NAME: ${env:BUCKET_NAME, "OpenAttestation-Functions-Storage"}-${self:provider.stage}
  OBJECT_TTL: ${env:OBJECT_TTL, 31} # Object TTL in days
  serverless-offline:
    lambdaPort: 5002
    httpPort: 5000
  isManagedDomain: 
    false: 'true' # To negate the environment variable DISABLE_DOMAIN
    true: 'false' # if you know of a way to do conditionals please change this
  customDomain:
    domainName: "${env:DOMAIN}" # Change this to your domain.
    basePath: "storage" # This will be prefixed to all routes
    stage: ${self:provider.stage}
    certificateName: "${env:CERTIFICATE_DOMAIN}"
    createRoute53Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2
    enabled: ${strToBool(${self:custom.isManagedDomain.${env:DISABLE_DOMAIN, 'false'}})}
  webpack:
    includeModules:
      packagePath: "../../package.json"
plugins:
  - serverless-dotenv-plugin
  - serverless-s3-local
  - serverless-offline
  - serverless-domain-manager
  - serverless-webpack
